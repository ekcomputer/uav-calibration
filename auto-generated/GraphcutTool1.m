function [BW_graph,maskedImage_graph] = GraphcutTool1(RGB)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW_graph,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the imageSegmenter app. The final segmentation
%  is returned in BW_graph, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 13-Aug-2019
%----------------------------------------------------
RGB=imread('C:\Users\lsmith.DESKTOP-JJ8STSU\Desktop\ETHAN\mapir_cal_test\2019_0811_183448_349.JPG');

% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Create empty mask.
BW_graph = false(size(X,1),size(X,2));

% Local graph cut
xPos = [3231.6239 3570.0855 3570.0855 3231.6239 ];
yPos = [2060.8823 2060.8823 2424.9849 2424.9849 ];
m = size(BW_graph, 1);
n = size(BW_graph, 2);
ROI = poly2mask(xPos,yPos,m,n);
foregroundInd = [9932196 9938195 9938199 9950204 9959204 9968206 9974206 9989206 9992171 9992172 10001203 10001204 10034292 10043282 10043285 10055276 10073269 10088252 10106244 10148362 10148364 10154359 10157355 10166347 10169344 10175340 10178337 10187330 10196157 10196158 10196159 10196161 10199152 10199319 10208147 10208309 10211143 10211144 10211161 10220161 10223161 10223302 10238223 10238226 10238227 10238228 10238231 10241233 10244234 10250217 10250234 10271213 10331204 10334204 10382319 10385314 10385316 10388307 10388310 10394304 10397297 10397302 10403290 10403293 10409283 10415279 10424272 10445255 10448255 ];
backgroundInd = [9683403 9692403 9725403 9740116 9743117 9746119 9752119 9761121 9761123 9767126 9773128 9773402 9776131 9785131 9788133 9797134 9806135 9815137 9818138 9827141 9836143 9839383 9845144 9848383 9854397 9857266 9857383 9860147 9866383 9881383 9887273 9890383 9902383 9908152 9908395 9911152 9917151 9917383 9920380 9923145 9923147 9932137 9932140 9932376 9938133 9941127 9941406 9947121 9947292 9947368 9947369 9947371 9950117 9950366 9950406 9959102 9959364 9962361 9962393 9971302 9974357 9980085 9980406 9989351 9992310 9995390 10001345 10001406 10010389 10013317 10013340 10016321 10016324 10016337 10022331 10022389 10031406 10040389 10052406 10055389 10067406 10073389 10082389 10082406 10094404 10103389 10109404 10118390 10124404 10130392 10136404 10148392 10157403 10175393 10178402 10187393 10190382 10196382 10196402 10199395 10202382 10208396 10211380 10217402 10223379 10229402 10232065 10232066 10232076 10232078 10232376 10241066 10241402 10244375 10244390 10250373 10253075 10253400 10259088 10259372 10259400 10262400 10268068 10268371 10268404 10271069 10271071 10271369 10274095 10274097 10274100 10274103 10274106 10274107 10274110 10280388 10283072 10283085 10283368 10289114 10289368 10289369 10292116 10292368 10295368 10295410 10301076 10301119 10301365 10301366 10304366 10310365 10313123 10313364 10316071 10316079 10316126 10316364 10322093 10322097 10322361 10325071 10331359 10331362 10334082 10334358 10337131 10337358 10343088 10343102 10343416 10346357 10346361 10346400 10352357 10355078 10355086 10355140 10361109 10361355 10361359 10364145 10364355 10364386 10367120 10367354 10367358 10376093 10376152 10376357 10382155 10382157 10382354 10382418 10385081 10385157 10385355 10388351 10388354 10394082 10394117 10397100 10397352 10403083 10403086 10403105 10403400 10406088 10406162 10406348 10409089 10409349 10415135 10415164 10415165 10415166 10424095 10424126 10424344 10424347 10430097 10430175 10436110 10436178 10436345 10436418 10439099 10439179 10439338 10439342 10439399 10445338 10448183 10448341 10451337 10457103 10457134 10457186 10457340 10457383 10460123 10460126 10460127 10460128 10460150 10460337 10460399 10466106 10466131 10466189 10466335 10466337 10469134 10469138 10469192 10469335 10469337 10475138 10475334 10475400 10478141 10478334 10481112 10481193 10487145 10487147 10487382 10487403 10490157 10490195 10490333 10490403 10496151 10496330 10502117 10502151 10502158 10502327 10508154 10508161 10508195 10508382 10508417 10511326 10511403 10517138 10517165 10517169 10517172 10517179 10517186 10517193 10517323 10520323 10520382 10523123 10523155 10529159 10529321 10529382 10532126 10532161 10538161 10538319 10538382 10541162 10541403 10544317 10544335 10544337 10550165 10553165 10553316 10553334 10559133 10559166 10559316 10559382 10562166 10562316 10562404 10565404 10571157 10571338 10571400 10571404 10574188 10574382 10580404 10583140 10583404 10592338 10595337 10595385 10595397 10601148 10601333 10601337 10604333 10604337 10604386 10604388 10610172 10610337 10610388 10610406 10613158 10616334 10616337 10616397 10616399 10622168 10622188 10625175 10625179 10625337 10631335 10631337 10631366 10631407 10637183 10637368 10643372 10646188 10646375 10652188 ];
L = superpixels(X,60100,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW_graph = BW_graph | grabcut(scaledX,L,ROI,foregroundInd,backgroundInd);

% Create masked image.
maskedImage_graph = RGB;
maskedImage_graph(repmat(~BW_graph,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1)   = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2:3) = (in(:,:,2:3) + 100) / 200;  % a* and b* range is [-100,100].

end
